
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hocuscodus.qed.lang;

import com.hocuscodus.qed.lang.AttrSet.*;
import com.hocuscodus.qed.lang.Declaration.*;
import com.hocuscodus.qed.lang.Exp.*;
import com.hocuscodus.qed.lang.type.*;
import com.hocuscodus.qed.lang.Identifier;
import com.hocuscodus.qed.node.CodeNode;
import java.util.List;
import java.util.ArrayList;
import com.hocuscodus.qed.java_cup_runtime.*;
import com.hocuscodus.qed.java_cup_runtime.ComplexSymbolFactory.ComplexSymbol;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class QEDParser extends com.hocuscodus.qed.java_cup_runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Constructor which sets the default scanner. */
  public QEDParser(com.hocuscodus.qed.java_cup_runtime.Scanner s, com.hocuscodus.qed.java_cup_runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\006\004\000\002\007\003\000\002" +
    "\007\005\000\002\010\007\000\002\011\004\000\002\012" +
    "\003\000\002\012\002\000\002\014\003\000\002\014\002" +
    "\000\002\015\003\000\002\015\004\000\002\013\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\007\000\002\021\004\000\002\021\007\000\002\021" +
    "\007\000\002\021\006\000\002\021\004\000\002\021\004" +
    "\000\002\021\003\000\002\022\005\000\002\022\012\000" +
    "\002\023\003\000\002\023\005\000\002\024\010\000\002" +
    "\025\010\000\002\025\012\000\002\026\002\000\002\026" +
    "\003\000\002\027\003\000\002\027\005\000\002\030\006" +
    "\000\002\030\010\000\002\031\003\000\002\031\003\000" +
    "\002\032\005\000\002\032\004\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\005\000\002\034" +
    "\006\000\002\035\005\000\002\036\002\000\002\036\006" +
    "\000\002\036\006\000\002\037\004\000\002\037\007\000" +
    "\002\037\004\000\002\037\003\000\002\037\003\000\002" +
    "\040\004\000\002\041\004\000\002\042\002\000\002\042" +
    "\004\000\002\043\010\000\002\044\002\000\002\045\002" +
    "\000\002\046\002\000\002\047\002\000\002\053\003\000" +
    "\002\053\005\000\002\052\002\000\002\052\003\000\002" +
    "\051\007\000\002\054\004\000\002\054\005\000\002\055" +
    "\005\000\002\056\006\000\002\056\010\000\002\057\006" +
    "\000\002\057\006\000\002\050\003\000\002\050\005\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\004\000\002\060\003\000\002\060" +
    "\003\000\002\060\004\000\002\060\004\000\002\063\006" +
    "\000\002\063\006\000\002\061\003\000\002\061\004\000" +
    "\002\061\004\000\002\061\003\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\062\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\003\000\002\062\003" +
    "\000\002\064\003\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\065\003\000\002\065\005\000\002" +
    "\065\005\000\002\066\003\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\067\003\000\002\067\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\070\003\000\002\070\005\000\002\070\005\000\002" +
    "\071\003\000\002\071\005\000\002\072\003\000\002\072" +
    "\005\000\002\073\003\000\002\073\005\000\002\074\003" +
    "\000\002\074\005\000\002\075\003\000\002\075\005\000" +
    "\002\076\003\000\002\076\007\000\002\077\003\000\002" +
    "\077\005\000\002\100\003\000\002\100\003\000\002\101" +
    "\005\000\002\101\005\000\002\101\005\000\002\101\005" +
    "\000\002\101\005\000\002\101\005\000\002\101\005\000" +
    "\002\101\005\000\002\101\005\000\002\101\005\000\002" +
    "\101\005\000\002\101\005\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\060\002\ufff1\004\ufff1\010\ufff1\011\ufff1\013" +
    "\ufff1\016\ufff1\021\007\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\047\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\056\002\uffb9\004\uffb9\010\uffb9\011\uffb9\013\uffb9\016" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\047\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\004\002\016" +
    "\001\002\000\056\002\ufff2\004\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\016\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\047\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\001\002\000\004" +
    "\075\012\001\002\000\004\002\000\001\002\000\006\006" +
    "\014\010\013\001\002\000\136\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\075\ufff6\077\ufff6\001\002\000\056\002" +
    "\uffec\004\uffec\010\uffec\011\uffec\013\uffec\016\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\047\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\001\002\000\004\075\015\001\002\000" +
    "\136\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\075\ufff5" +
    "\077\ufff5\001\002\000\004\002\001\001\002\000\056\002" +
    "\uffef\004\uffef\010\uffef\011\uffef\013\uffef\016\uffef\022\022" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\047\uffef\070\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\001\002\000\056\002\uffea\004\uffea\010" +
    "\uffea\011\uffea\013\uffea\016\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\047" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\001\002\000\056\002\uffee\004\uffee\010\uffee\011\uffee\013" +
    "\uffee\016\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\047\uffee\070\uffee\071" +
    "\uffee\072\uffee\073\uffee\074\uffee\075\uffee\001\002\000\004" +
    "\075\012\001\002\000\056\002\ufff0\004\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\016\ufff0\022\022\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\047\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\001\002" +
    "\000\054\002\uffbc\004\uffbc\010\uffbc\011\uffbc\013\uffbc\016" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\047\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\001\002\000\056\002\uffeb\004\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\016\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\047\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\001\002\000\054\002\uffc9\004\uffc9\010\uffc9\011\uffc9" +
    "\013\uffc9\016\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\047\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000\054\002" +
    "\uffbb\004\uffbb\010\uffbb\011\uffbb\013\uffbb\016\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\047\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\054\002\ufff3\004\ufff3\010\ufff3\011" +
    "\ufff3\013\ufff3\016\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\047\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\001\002\000\054" +
    "\002\ufff4\004\uffbc\010\uffbc\011\uffbc\013\uffbc\016\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\047\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\001\002\000\052\004\uffbb\010\035\011\uffbb" +
    "\013\033\016\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\047\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002\000\054\004" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\016\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\047\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\001\002\000\060\002\uffbf\004\uffbf\010\uffbf\011" +
    "\uffbf\013\uffbf\014\uffbf\016\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\046\uffbf\047" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\001\002\000\060\002\uffc2\004\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\016\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\046\uffc2\047\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\001\002" +
    "\000\004\013\033\001\002\000\006\007\u010e\010\u010d\001" +
    "\002\000\060\002\uffc3\004\uffc3\010\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\046\uffc3\047\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\001\002\000" +
    "\046\004\104\011\047\016\052\023\077\024\121\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\010\007\uffc0\010\uffc0\013\uffc1\001\002\000\132\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\015\uff63\017\uffa8\020\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uff63" +
    "\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064" +
    "\uff63\065\uff63\066\uff63\067\uff63\077\uffa8\001\002\000\042" +
    "\004\104\016\052\023\077\025\044\026\074\027\072\030" +
    "\055\031\070\032\061\047\062\070\123\071\110\072\057" +
    "\073\060\074\045\075\012\001\002\000\102\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\017\ufffb\020\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\077\ufffb\001\002\000\032" +
    "\015\374\055\366\056\365\057\377\060\371\061\375\062" +
    "\373\063\372\064\370\065\367\066\364\067\376\001\002" +
    "\000\042\004\104\016\052\023\077\025\044\026\074\027" +
    "\072\030\055\031\070\032\061\047\062\070\123\071\110" +
    "\072\057\073\060\074\045\075\012\001\002\000\064\005" +
    "\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c\017\uff8c\020\uff8c" +
    "\027\223\030\224\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\054\uff8c\077\uff8c\001\002\000" +
    "\030\005\uff78\007\uff78\010\uff78\012\uff78\013\uff78\017\uff78" +
    "\020\uff78\052\303\053\uff78\054\uff78\077\uff78\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\102\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\017\uffac\020\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\077\uffac\001\002\000" +
    "\056\002\uffc7\004\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7" +
    "\016\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\047\uffc7\070\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\126\004\352\006\014\007\uffa4" +
    "\010\uffa4\011\uffa4\013\uffa4\015\uff64\016\145\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063" +
    "\uff64\064\uff64\065\uff64\066\uff64\067\uff64\075\ufff8\077\uffa4" +
    "\001\002\000\102\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\077\ufffd\001\002\000\102\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\017\ufffc\020" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\077\ufffc\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\006\070\347\075\350\001\002" +
    "\000\042\005\uff80\007\uff80\010\uff80\012\uff80\013\uff80\017" +
    "\uff80\020\uff80\044\272\045\271\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\077\uff80\001\002\000\004\075" +
    "\ufff9\001\002\000\034\005\uff7c\007\uff7c\010\uff7c\012\uff7c" +
    "\013\uff7c\017\uff7c\020\uff7c\050\265\051\uff7c\052\uff7c\053" +
    "\uff7c\054\uff7c\077\uff7c\001\002\000\072\005\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\017\uff9c\020\uff9c\027" +
    "\uff9c\030\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\077\uff9c" +
    "\001\002\000\020\005\uff71\007\uff71\010\uff71\012\uff71\013" +
    "\uff71\017\uff71\020\uff71\001\002\000\042\004\104\016\052" +
    "\023\077\025\044\026\074\027\072\030\055\031\070\032" +
    "\061\047\062\070\123\071\110\072\057\073\060\074\045" +
    "\075\012\001\002\000\102\004\336\005\uffa5\006\337\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\017\uffa5\020\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\077\uffa5\001\002\000\042\004\104\016\052" +
    "\023\077\025\044\026\074\027\072\030\055\031\070\032" +
    "\061\047\062\070\123\071\110\072\057\073\060\074\045" +
    "\075\012\001\002\000\010\007\uffe1\010\uffe1\013\uffe1\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\072" +
    "\005\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\017" +
    "\uff93\020\uff93\027\uff93\030\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\077\uff93\001\002\000\072\005\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\017\uff94\020\uff94\027\uff94" +
    "\030\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\077\uff94\001" +
    "\002\000\006\004\104\075\012\001\002\000\022\005\uff74" +
    "\007\uff74\010\uff74\012\uff74\013\uff74\017\uff74\020\uff74\077" +
    "\325\001\002\000\076\005\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\017\uff9f\020\uff9f\025\324\026\323\027" +
    "\uff9f\030\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\077\uff9f" +
    "\001\002\000\072\005\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\017\uff95\020\uff95\027\uff95\030\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\077\uff95\001\002\000\060\005" +
    "\uff88\007\uff88\010\uff88\012\uff88\013\uff88\017\uff88\020\uff88" +
    "\035\217\036\221\037\220\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\077\uff88\001\002\000\044\004\104\005" +
    "\311\016\052\023\077\025\044\026\074\027\072\030\055" +
    "\031\070\032\061\047\062\070\123\071\110\072\057\073" +
    "\060\074\045\075\012\001\002\000\026\005\uff76\007\uff76" +
    "\010\uff76\012\uff76\013\uff76\017\uff76\020\uff76\053\275\054" +
    "\276\077\uff76\001\002\000\102\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\017\uffaa\020" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\077\uffaa\001\002\000\036\005\uff7e\007" +
    "\uff7e\010\uff7e\012\uff7e\013\uff7e\017\uff7e\020\uff7e\047\267" +
    "\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\077\uff7e\001" +
    "\002\000\102\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\077\ufffe\001\002\000\032\005\uff7a\007\uff7a\010\uff7a\012" +
    "\uff7a\013\uff7a\017\uff7a\020\uff7a\051\263\052\uff7a\053\uff7a" +
    "\054\uff7a\077\uff7a\001\002\000\020\005\uff61\007\uff61\010" +
    "\uff61\012\uff61\013\uff61\017\uff61\020\uff61\001\002\000\004" +
    "\075\ufffa\001\002\000\072\005\uff8f\007\uff8f\010\uff8f\011" +
    "\227\012\uff8f\013\uff8f\017\uff8f\020\uff8f\027\uff8f\030\uff8f" +
    "\033\230\034\226\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\077\uff8f\001\002\000" +
    "\102\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\017\uffa9\020\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\077\uffa9" +
    "\001\002\000\006\010\242\013\033\001\002\000\052\005" +
    "\uff83\007\uff83\010\uff83\012\uff83\013\uff83\017\uff83\020\uff83" +
    "\040\207\041\211\042\212\043\210\044\uff83\045\uff83\047" +
    "\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\077\uff83" +
    "\001\002\000\132\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uff62\017\uffa7\020\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62" +
    "\062\uff62\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62\077" +
    "\uffa7\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\020\005\uff72\007\uff72\010\uff72\012\uff72\013\uff72\017" +
    "\uff72\020\uff72\001\002\000\102\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\017\uffff\020" +
    "\uffff\025\uffff\026\uffff\027\uffff\030\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\077\uffff\001\002\000\004\075\125\001" +
    "\002\000\014\007\uffe7\010\uffe7\013\uffe7\015\126\016\uffb9" +
    "\001\002\000\046\004\104\011\201\016\052\023\077\024" +
    "\203\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\004\016\130\001\002\000\006\017\uffd9" +
    "\075\uffbc\001\002\000\004\017\165\001\002\000\006\012" +
    "\163\017\uffd8\001\002\000\004\075\uffbb\001\002\000\006" +
    "\012\uffd7\017\uffd7\001\002\000\004\075\012\001\002\000" +
    "\010\004\156\006\014\075\ufff8\001\002\000\004\075\140" +
    "\001\002\000\010\012\uffd5\015\141\017\uffd5\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\134\004\144" +
    "\005\uffa4\006\014\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\015\uff64\016\145\017\uffa4\020\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64" +
    "\064\uff64\065\uff64\066\uff64\067\uff64\077\uffa4\001\002\000" +
    "\006\012\uffd4\017\uffd4\001\002\000\042\004\104\016\052" +
    "\023\077\025\044\026\074\027\072\030\055\031\070\032" +
    "\061\047\062\070\123\071\110\072\057\073\060\074\045" +
    "\075\012\001\002\000\044\004\104\016\052\017\uffb6\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\004\017\153\001\002\000\006\012\uffb8" +
    "\017\uffb8\001\002\000\006\012\151\017\uffb5\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\006\012\uffb7" +
    "\017\uffb7\001\002\000\102\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\017\uffb0\020\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\077\uffb0\001\002\000\004\005\155\001\002" +
    "\000\132\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\015\uffae\017\uffae\020\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\077\uffae\001" +
    "\002\000\004\005\162\001\002\000\010\004\160\017\ufff7" +
    "\075\ufff7\001\002\000\004\005\161\001\002\000\010\004" +
    "\uffb2\017\uffb2\075\uffb2\001\002\000\010\004\uffb3\017\uffb3" +
    "\075\uffb3\001\002\000\004\075\uffbc\001\002\000\006\012" +
    "\uffd6\017\uffd6\001\002\000\010\010\uffdb\013\uffdb\020\166" +
    "\001\002\000\004\075\uffbc\001\002\000\010\010\uffde\012" +
    "\uffde\013\uffde\001\002\000\010\010\uffda\012\177\013\uffda" +
    "\001\002\000\004\075\uffbb\001\002\000\004\075\012\001" +
    "\002\000\006\006\014\016\174\001\002\000\044\004\104" +
    "\016\052\017\uffb6\023\077\025\044\026\074\027\072\030" +
    "\055\031\070\032\061\047\062\070\123\071\110\072\057" +
    "\073\060\074\045\075\012\001\002\000\004\017\176\001" +
    "\002\000\010\010\uffdc\012\uffdc\013\uffdc\001\002\000\004" +
    "\075\uffbc\001\002\000\010\010\uffdd\012\uffdd\013\uffdd\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\010" +
    "\007\uffe4\010\uffe4\013\uffe4\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\010\007\uffe5\010\uffe5\013\uffe5" +
    "\001\002\000\010\007\uffe6\010\uffe6\013\uffe6\001\002\000" +
    "\010\007\uffe2\010\uffe2\013\uffe2\001\002\000\042\004\104" +
    "\016\052\023\077\025\044\026\074\027\072\030\055\031" +
    "\070\032\061\047\062\070\123\071\110\072\057\073\060" +
    "\074\045\075\012\001\002\000\042\004\104\016\052\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\042\004\104\016\052\023\077\025\044\026\074\027" +
    "\072\030\055\031\070\032\061\047\062\070\123\071\110" +
    "\072\057\073\060\074\045\075\012\001\002\000\102\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\017\uffa8\020\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\077\uffa8\001\002" +
    "\000\060\005\uff85\007\uff85\010\uff85\012\uff85\013\uff85\017" +
    "\uff85\020\uff85\035\217\036\221\037\220\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\047\uff85\050\uff85\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\077\uff85\001\002\000\102" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\013\uffa7\017\uffa7\020\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\077\uffa7\001" +
    "\002\000\104\004\144\005\uffa4\006\014\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\016\145\017\uffa4\020\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\077\uffa4\001\002\000\042\004\104\016\052\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\042\004\104\016\052\023\077\025\044\026\074\027" +
    "\072\030\055\031\070\032\061\047\062\070\123\071\110" +
    "\072\057\073\060\074\045\075\012\001\002\000\064\005" +
    "\uff8a\007\uff8a\010\uff8a\012\uff8a\013\uff8a\017\uff8a\020\uff8a" +
    "\027\223\030\224\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\054\uff8a\077\uff8a\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\042\004\104" +
    "\016\052\023\077\025\044\026\074\027\072\030\055\031" +
    "\070\032\061\047\062\070\123\071\110\072\057\073\060" +
    "\074\045\075\012\001\002\000\072\005\uff8d\007\uff8d\010" +
    "\uff8d\011\227\012\uff8d\013\uff8d\017\uff8d\020\uff8d\027\uff8d" +
    "\030\uff8d\033\230\034\226\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\077\uff8d\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\042" +
    "\004\104\016\052\023\077\025\044\026\074\027\072\030" +
    "\055\031\070\032\061\047\062\070\123\071\110\072\057" +
    "\073\060\074\045\075\012\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\072\005\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\017\uff91\020\uff91\027\uff91\030" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\077\uff91\001\002" +
    "\000\072\005\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013" +
    "\uff92\017\uff92\020\uff92\027\uff92\030\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\077\uff92\001\002\000\072\005\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\017\uff90\020\uff90" +
    "\027\uff90\030\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\077" +
    "\uff90\001\002\000\072\005\uff8e\007\uff8e\010\uff8e\011\227" +
    "\012\uff8e\013\uff8e\017\uff8e\020\uff8e\027\uff8e\030\uff8e\033" +
    "\230\034\226\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\077\uff8e\001\002\000\064" +
    "\005\uff89\007\uff89\010\uff89\012\uff89\013\uff89\017\uff89\020" +
    "\uff89\027\223\030\224\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050" +
    "\uff89\051\uff89\052\uff89\053\uff89\054\uff89\077\uff89\001\002" +
    "\000\064\005\uff8b\007\uff8b\010\uff8b\012\uff8b\013\uff8b\017" +
    "\uff8b\020\uff8b\027\223\030\224\035\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\077\uff8b" +
    "\001\002\000\060\005\uff86\007\uff86\010\uff86\012\uff86\013" +
    "\uff86\017\uff86\020\uff86\035\217\036\221\037\220\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\077\uff86\001\002" +
    "\000\060\005\uff84\007\uff84\010\uff84\012\uff84\013\uff84\017" +
    "\uff84\020\uff84\035\217\036\221\037\220\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\044\uff84\045\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\054\uff84\077\uff84\001\002\000\060" +
    "\005\uff87\007\uff87\010\uff87\012\uff87\013\uff87\017\uff87\020" +
    "\uff87\035\217\036\221\037\220\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\077\uff87\001\002\000\062\002\uffd2" +
    "\004\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\046\uffd2\047\uffd2\070\uffd2\071\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\062\002\uffbf" +
    "\004\uffbf\007\246\010\uffbf\011\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\046\uffbf\047\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000\062\002\uffd3" +
    "\004\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\016" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\046\uffd3\047\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\001\002\000\060\002\uffe0" +
    "\004\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\046\uffbb\047\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\001\002\000\042\004\uffbb\016\uffbb" +
    "\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\047\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\042\004\104\016\052\023\077\025" +
    "\044\026\074\027\072\030\055\031\070\032\061\047\062" +
    "\070\123\071\110\072\057\073\060\074\045\075\012\001" +
    "\002\000\004\010\uffba\001\002\000\004\010\252\001\002" +
    "\000\060\002\uffbf\004\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\046\uffbf\047\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000\060" +
    "\002\uffdf\004\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\016" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\046\uffbb\047\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\001\002\000\064\002\uffbe" +
    "\004\uffbe\005\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\016\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\046\uffbe\047\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000\004" +
    "\046\256\001\002\000\004\075\257\001\002\000\004\016" +
    "\260\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\004\017\262\001\002\000\064\002\uffbd\004\uffbd\005" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\046\uffbd\047\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\034\005\uff7b\007\uff7b\010\uff7b" +
    "\012\uff7b\013\uff7b\017\uff7b\020\uff7b\050\265\051\uff7b\052" +
    "\uff7b\053\uff7b\054\uff7b\077\uff7b\001\002\000\042\004\104" +
    "\016\052\023\077\025\044\026\074\027\072\030\055\031" +
    "\070\032\061\047\062\070\123\071\110\072\057\073\060" +
    "\074\045\075\012\001\002\000\036\005\uff7d\007\uff7d\010" +
    "\uff7d\012\uff7d\013\uff7d\017\uff7d\020\uff7d\047\267\050\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\077\uff7d\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\042\005\uff7f" +
    "\007\uff7f\010\uff7f\012\uff7f\013\uff7f\017\uff7f\020\uff7f\044" +
    "\272\045\271\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\077\uff7f\001\002\000\042\004\104\016\052\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\052\005\uff82\007\uff82\010\uff82\012\uff82\013\uff82\017" +
    "\uff82\020\uff82\040\207\041\211\042\212\043\210\044\uff82" +
    "\045\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\077\uff82\001\002\000\052\005\uff81\007\uff81\010\uff81" +
    "\012\uff81\013\uff81\017\uff81\020\uff81\040\207\041\211\042" +
    "\212\043\210\044\uff81\045\uff81\047\uff81\050\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\077\uff81\001\002\000\042\004" +
    "\104\016\052\023\077\025\044\026\074\027\072\030\055" +
    "\031\070\032\061\047\062\070\123\071\110\072\057\073" +
    "\060\074\045\075\012\001\002\000\042\004\104\016\052" +
    "\023\077\025\044\026\074\027\072\030\055\031\070\032" +
    "\061\047\062\070\123\071\110\072\057\073\060\074\045" +
    "\075\012\001\002\000\004\020\300\001\002\000\042\004" +
    "\104\016\052\023\077\025\044\026\074\027\072\030\055" +
    "\031\070\032\061\047\062\070\123\071\110\072\057\073" +
    "\060\074\045\075\012\001\002\000\022\005\uff75\007\uff75" +
    "\010\uff75\012\uff75\013\uff75\017\uff75\020\uff75\077\uff75\001" +
    "\002\000\030\005\uff77\007\uff77\010\uff77\012\uff77\013\uff77" +
    "\017\uff77\020\uff77\052\303\053\uff77\054\uff77\077\uff77\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\032" +
    "\005\uff79\007\uff79\010\uff79\012\uff79\013\uff79\017\uff79\020" +
    "\uff79\051\263\052\uff79\053\uff79\054\uff79\077\uff79\001\002" +
    "\000\006\005\320\012\321\001\002\000\126\004\144\005" +
    "\uffa4\006\014\007\uffa4\011\uffa4\012\uffa4\013\ufff8\015\uff64" +
    "\016\145\025\uffa4\026\uffa4\027\uffa4\030\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uff64\056\uff64\057\uff64\060\uff64" +
    "\061\uff64\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067" +
    "\uff64\077\uffa4\001\002\000\010\005\uffcd\007\316\012\uffcd" +
    "\001\002\000\006\005\uffcf\012\uffcf\001\002\000\102\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\017\uffd0\020\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\077\uffd0\001\002" +
    "\000\004\013\uffb9\001\002\000\004\013\033\001\002\000" +
    "\010\005\uffbf\012\uffbf\046\uffbf\001\002\000\010\005\uffcb" +
    "\012\uffcb\046\uffbb\001\002\000\042\004\104\016\052\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\006\005\uffcc\012\uffcc\001\002\000\102" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\017\uffd1\020\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\077\uffd1\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\006" +
    "\005\uffce\012\uffce\001\002\000\076\005\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\017\uffa2\020\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\077\uffa2\001\002\000\076\005\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\017\uffa3\020\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\077\uffa3\001\002\000\042\004\104\016\052\023\077\025" +
    "\044\026\074\027\072\030\055\031\070\032\061\047\062" +
    "\070\123\071\110\072\057\073\060\074\045\075\012\001" +
    "\002\000\020\005\uff73\007\uff73\010\uff73\012\uff73\013\uff73" +
    "\017\uff73\020\uff73\001\002\000\102\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\017\uffa6" +
    "\020\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\077\uffa6\001\002\000\006\006\014" +
    "\016\331\001\002\000\044\004\104\016\052\017\uffb6\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\004\017\333\001\002\000\102\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\017\uffb4\020\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\077\uffb4\001\002\000" +
    "\072\005\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\017\uff9a\020\uff9a\027\uff9a\030\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\077\uff9a\001\002\000\072\005\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\013\uff99\017\uff99\020\uff99\027" +
    "\uff99\030\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\077\uff99" +
    "\001\002\000\042\004\104\016\052\023\077\025\044\026" +
    "\074\027\072\030\055\031\070\032\061\047\062\070\123" +
    "\071\110\072\057\073\060\074\045\075\012\001\002\000" +
    "\004\075\340\001\002\000\134\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\341\017\uffb1\020\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\077\uffb1\001\002\000\044\004\104\016" +
    "\052\017\uffb6\023\077\025\044\026\074\027\072\030\055" +
    "\031\070\032\061\047\062\070\123\071\110\072\057\073" +
    "\060\074\045\075\012\001\002\000\004\017\343\001\002" +
    "\000\102\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\017\uffaf\020\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\077" +
    "\uffaf\001\002\000\004\005\345\001\002\000\132\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\015\uffad\017\uffad\020\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\065\uffad\066\uffad\067\uffad\077\uffad\001\002\000\072\005" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\017\uff9e" +
    "\020\uff9e\027\uff9e\030\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\077\uff9e\001\002\000\072\005\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\017\uff96\020\uff96\027\uff96\030" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\077\uff96\001\002" +
    "\000\072\005\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\017\uff97\020\uff97\027\uff97\030\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\077\uff97\001\002\000\072\005\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\017\uff9d\020\uff9d" +
    "\027\uff9d\030\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\077" +
    "\uff9d\001\002\000\044\004\104\005\162\016\052\023\077" +
    "\025\044\026\074\027\072\030\055\031\070\032\061\047" +
    "\062\070\123\071\110\072\057\073\060\074\045\075\012" +
    "\001\002\000\072\005\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\017\uff98\020\uff98\027\uff98\030\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\053\uff98\054\uff98\077\uff98\001\002\000\120\004" +
    "\352\006\014\011\uffa4\015\uff64\016\145\017\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\077\uffa4\001" +
    "\002\000\004\017\361\001\002\000\004\017\357\001\002" +
    "\000\126\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\016\052\017\uffab\020\uffab\023\077" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\070\032\061\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\070\123\071\110\072\057" +
    "\073\060\074\045\075\012\077\uffab\001\002\000\072\005" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\017\uffa1" +
    "\020\uffa1\027\uffa1\030\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\077\uffa1\001\002\000\026\016\052\023\077\031\070" +
    "\032\061\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\072\005\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\017\uffa0\020\uffa0\027\uffa0\030\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\077\uffa0\001\002\000\010" +
    "\007\uffe3\010\uffe3\013\uffe3\001\002\000\042\004\104\016" +
    "\052\023\077\025\044\026\074\027\072\030\055\031\070" +
    "\032\061\047\062\070\123\071\110\072\057\073\060\074" +
    "\045\075\012\001\002\000\042\004\104\016\052\023\077" +
    "\025\044\026\074\027\072\030\055\031\070\032\061\047" +
    "\062\070\123\071\110\072\057\073\060\074\045\075\012" +
    "\001\002\000\042\004\104\016\052\023\077\025\044\026" +
    "\074\027\072\030\055\031\070\032\061\047\062\070\123" +
    "\071\110\072\057\073\060\074\045\075\012\001\002\000" +
    "\042\004\104\016\052\023\077\025\044\026\074\027\072" +
    "\030\055\031\070\032\061\047\062\070\123\071\110\072" +
    "\057\073\060\074\045\075\012\001\002\000\042\004\104" +
    "\016\052\023\077\025\044\026\074\027\072\030\055\031" +
    "\070\032\061\047\062\070\123\071\110\072\057\073\060" +
    "\074\045\075\012\001\002\000\042\004\104\016\052\023" +
    "\077\025\044\026\074\027\072\030\055\031\070\032\061" +
    "\047\062\070\123\071\110\072\057\073\060\074\045\075" +
    "\012\001\002\000\042\004\104\016\052\023\077\025\044" +
    "\026\074\027\072\030\055\031\070\032\061\047\062\070" +
    "\123\071\110\072\057\073\060\074\045\075\012\001\002" +
    "\000\042\004\104\016\052\023\077\025\044\026\074\027" +
    "\072\030\055\031\070\032\061\047\062\070\123\071\110" +
    "\072\057\073\060\074\045\075\012\001\002\000\042\004" +
    "\104\016\052\023\077\025\044\026\074\027\072\030\055" +
    "\031\070\032\061\047\062\070\123\071\110\072\057\073" +
    "\060\074\045\075\012\001\002\000\042\004\104\016\052" +
    "\023\077\025\044\026\074\027\072\030\055\031\070\032" +
    "\061\047\062\070\123\071\110\072\057\073\060\074\045" +
    "\075\012\001\002\000\042\004\104\016\052\023\077\025" +
    "\044\026\074\027\072\030\055\031\070\032\061\047\062" +
    "\070\123\071\110\072\057\073\060\074\045\075\012\001" +
    "\002\000\042\004\104\016\052\023\077\025\044\026\074" +
    "\027\072\030\055\031\070\032\061\047\062\070\123\071" +
    "\110\072\057\073\060\074\045\075\012\001\002\000\020" +
    "\005\uff6d\007\uff6d\010\uff6d\012\uff6d\013\uff6d\017\uff6d\020" +
    "\uff6d\001\002\000\020\005\uff66\007\uff66\010\uff66\012\uff66" +
    "\013\uff66\017\uff66\020\uff66\001\002\000\020\005\uff6b\007" +
    "\uff6b\010\uff6b\012\uff6b\013\uff6b\017\uff6b\020\uff6b\001\002" +
    "\000\020\005\uff70\007\uff70\010\uff70\012\uff70\013\uff70\017" +
    "\uff70\020\uff70\001\002\000\020\005\uff6a\007\uff6a\010\uff6a" +
    "\012\uff6a\013\uff6a\017\uff6a\020\uff6a\001\002\000\020\005" +
    "\uff69\007\uff69\010\uff69\012\uff69\013\uff69\017\uff69\020\uff69" +
    "\001\002\000\020\005\uff6c\007\uff6c\010\uff6c\012\uff6c\013" +
    "\uff6c\017\uff6c\020\uff6c\001\002\000\020\005\uff68\007\uff68" +
    "\010\uff68\012\uff68\013\uff68\017\uff68\020\uff68\001\002\000" +
    "\020\005\uff67\007\uff67\010\uff67\012\uff67\013\uff67\017\uff67" +
    "\020\uff67\001\002\000\020\005\uff6f\007\uff6f\010\uff6f\012" +
    "\uff6f\013\uff6f\017\uff6f\020\uff6f\001\002\000\020\005\uff6e" +
    "\007\uff6e\010\uff6e\012\uff6e\013\uff6e\017\uff6e\020\uff6e\001" +
    "\002\000\020\005\uff65\007\uff65\010\uff65\012\uff65\013\uff65" +
    "\017\uff65\020\uff65\001\002\000\072\005\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\017\uff9b\020\uff9b\027\uff9b" +
    "\030\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\077\uff9b\001" +
    "\002\000\060\002\uffc6\004\uffc6\010\uffc6\011\uffc6\013\uffc6" +
    "\014\uffc6\016\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\046\uffc6\047\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\042\004\uffbb\016\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\047\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002\000\042\004\104" +
    "\016\052\023\077\025\044\026\074\027\072\030\055\031" +
    "\070\032\061\047\062\070\123\071\110\072\057\073\060" +
    "\074\045\075\012\001\002\000\004\010\u0111\001\002\000" +
    "\060\002\uffc5\004\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\016\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\046\uffc5\047\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002\000\060\002" +
    "\uffc4\004\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4\016\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\046\uffc4\047\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\001\002\000\060\002\uffc8\004" +
    "\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\046\uffbb\047\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\054\004\uffbc\010\uffbc\011" +
    "\uffbc\013\uffbc\014\u0115\016\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\047\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\001\002" +
    "\000\066\002\uffca\004\uffca\005\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\016\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\046" +
    "\uffca\047\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\075\uffca\001\002\000\056\002\uffed\004\uffed\010\uffed\011" +
    "\uffed\013\uffed\016\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\047\uffed\070" +
    "\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\001\002" +
    "\000\006\006\u0119\010\u0118\001\002\000\056\002\uffe9\004" +
    "\uffe9\010\uffe9\011\uffe9\013\uffe9\016\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\047\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\001\002\000\006\011\u011a\075\015\001\002\000" +
    "\004\010\u011b\001\002\000\056\002\uffe8\004\uffe8\010\uffe8" +
    "\011\uffe8\013\uffe8\016\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\047\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\012\002\004\010\007\012\003\013\005\001" +
    "\001\000\004\047\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\023\015\022\016\020\017\024\020\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0116\001\001\000" +
    "\010\016\u0115\017\024\020\017\001\001\000\006\011\025" +
    "\044\026\001\001\000\002\001\001\000\004\036\030\001" +
    "\001\000\004\045\027\001\001\000\002\001\001\000\004" +
    "\044\031\001\001\000\014\035\037\037\033\040\035\041" +
    "\036\045\040\001\001\000\004\036\u0113\001\001\000\004" +
    "\042\u0112\001\001\000\002\001\001\000\004\035\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\003\052" +
    "\004\123\005\112\006\063\007\055\021\041\022\053\025" +
    "\115\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\111\101\066\102\045\103" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\052\007\215\032\075\050\070\051\105\055\212\056" +
    "\114\057\214\060\100\061\101\062\u010b\063\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\003\052\007" +
    "\141\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\111\101\066\102\045\103" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\003\052\006\354\007\353\032\075\050\070\051\105\055" +
    "\042\056\114\057\117\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\102\067\116\070\062\071\106\072" +
    "\064\073\110\074\050\075\104\076\077\077\121\100\111" +
    "\101\066\102\045\103\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\052\007\215\032\075\050\070" +
    "\051\105\055\212\056\114\057\214\060\100\061\101\062" +
    "\352\063\065\001\001\000\004\054\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\052\007\215\032" +
    "\075\050\070\051\105\055\212\056\114\057\214\060\100" +
    "\061\101\062\350\063\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\052\007\215\032" +
    "\075\050\070\051\105\055\212\056\114\057\214\060\100" +
    "\061\101\062\345\063\065\001\001\000\002\001\001\000" +
    "\032\003\052\007\215\032\075\050\070\051\105\055\212" +
    "\056\114\057\214\060\100\061\101\062\334\063\065\001" +
    "\001\000\002\001\001\000\032\003\052\007\215\032\075" +
    "\050\070\051\105\055\212\056\114\057\214\060\100\061" +
    "\101\062\333\063\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\327\032\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\003\052\005\311\007\305\032\075\033\304\034" +
    "\307\050\070\051\105\055\042\056\114\057\117\060\100" +
    "\061\101\062\074\063\065\064\113\065\047\066\102\067" +
    "\116\070\062\071\106\072\064\073\110\074\050\075\104" +
    "\076\077\077\121\100\111\101\066\102\045\103\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\242\035\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\052\007\141\032\075\050\070\051\105" +
    "\055\042\056\114\057\117\060\100\061\101\062\074\063" +
    "\065\064\113\065\047\066\102\067\116\070\062\071\106" +
    "\072\064\073\110\074\050\075\104\076\077\077\121\100" +
    "\111\101\066\102\045\103\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\126\001" +
    "\001\000\072\003\052\007\141\032\075\050\070\051\105" +
    "\055\042\056\114\057\117\060\100\061\101\062\074\063" +
    "\065\064\113\065\047\066\102\067\116\070\062\071\106" +
    "\072\064\073\110\074\050\075\104\076\077\077\121\100" +
    "\111\101\066\102\045\103\201\001\001\000\002\001\001" +
    "\000\012\026\130\027\131\030\133\044\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\134\001\001" +
    "\000\002\001\001\000\012\004\136\005\112\006\063\007" +
    "\135\001\001\000\004\054\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\052\007\141\032\075\050" +
    "\070\051\105\055\042\056\114\057\117\060\100\061\101" +
    "\062\074\063\065\064\113\065\047\066\102\067\116\070" +
    "\062\071\106\072\064\073\110\074\050\075\104\076\077" +
    "\077\121\100\111\101\066\102\045\103\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\003\052\007\141" +
    "\032\075\050\070\051\105\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\111\101\066\102\045\103\153" +
    "\001\001\000\076\003\052\007\141\032\075\050\070\051" +
    "\105\052\145\053\147\055\042\056\114\057\117\060\100" +
    "\061\101\062\074\063\065\064\113\065\047\066\102\067" +
    "\116\070\062\071\106\072\064\073\110\074\050\075\104" +
    "\076\077\077\121\100\111\101\066\102\045\103\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\003\052\007\141\032\075\050\070\051\105\055" +
    "\042\056\114\057\117\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\102\067\116\070\062\071\106\072" +
    "\064\073\110\074\050\075\104\076\077\077\121\100\111" +
    "\101\066\102\045\103\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\163\044\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\167\024" +
    "\166\044\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\171\001\001\000\004\007\172\001\001\000" +
    "\002\001\001\000\076\003\052\007\141\032\075\050\070" +
    "\051\105\052\174\053\147\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\111\101\066\102\045\103\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\177\044\170\001\001\000\002\001\001\000\072\003\052" +
    "\007\141\032\075\050\070\051\105\055\042\056\114\057" +
    "\117\060\100\061\101\062\074\063\065\064\113\065\047" +
    "\066\102\067\116\070\062\071\106\072\064\073\110\074" +
    "\050\075\104\076\077\077\121\100\111\101\066\102\045" +
    "\103\204\001\001\000\002\001\001\000\072\003\052\007" +
    "\141\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\111\101\066\102\045\103" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\052\007\215\032\075\050\070\051" +
    "\105\055\212\056\114\057\214\060\100\061\101\062\074" +
    "\063\065\064\113\065\047\066\240\001\001\000\040\003" +
    "\052\007\215\032\075\050\070\051\105\055\212\056\114" +
    "\057\214\060\100\061\101\062\074\063\065\064\113\065" +
    "\047\066\237\001\001\000\040\003\052\007\215\032\075" +
    "\050\070\051\105\055\212\056\114\057\214\060\100\061" +
    "\101\062\074\063\065\064\113\065\047\066\236\001\001" +
    "\000\040\003\052\007\215\032\075\050\070\051\105\055" +
    "\212\056\114\057\214\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\052\007\215\032\075\050\070\051\105\055\212\056" +
    "\114\057\214\060\100\061\101\062\074\063\065\064\113" +
    "\065\235\001\001\000\036\003\052\007\215\032\075\050" +
    "\070\051\105\055\212\056\114\057\214\060\100\061\101" +
    "\062\074\063\065\064\113\065\234\001\001\000\036\003" +
    "\052\007\215\032\075\050\070\051\105\055\212\056\114" +
    "\057\214\060\100\061\101\062\074\063\065\064\113\065" +
    "\221\001\001\000\002\001\001\000\034\003\052\007\215" +
    "\032\075\050\070\051\105\055\212\056\114\057\214\060" +
    "\100\061\101\062\074\063\065\064\233\001\001\000\034" +
    "\003\052\007\215\032\075\050\070\051\105\055\212\056" +
    "\114\057\214\060\100\061\101\062\074\063\065\064\224" +
    "\001\001\000\002\001\001\000\032\003\052\007\215\032" +
    "\075\050\070\051\105\055\212\056\114\057\214\060\100" +
    "\061\101\062\232\063\065\001\001\000\032\003\052\007" +
    "\215\032\075\050\070\051\105\055\212\056\114\057\214" +
    "\060\100\061\101\062\231\063\065\001\001\000\032\003" +
    "\052\007\215\032\075\050\070\051\105\055\212\056\114" +
    "\057\214\060\100\061\101\062\230\063\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\244\001\001\000\002\001\001\000\006\043" +
    "\253\045\254\001\001\000\004\045\246\001\001\000\072" +
    "\003\052\007\141\032\075\050\070\051\105\055\042\056" +
    "\114\057\117\060\100\061\101\062\074\063\065\064\113" +
    "\065\047\066\102\067\116\070\062\071\106\072\064\073" +
    "\110\074\050\075\104\076\077\077\121\100\111\101\066" +
    "\102\045\103\247\001\001\000\004\046\250\001\001\000" +
    "\002\001\001\000\004\042\252\001\001\000\006\043\253" +
    "\045\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\003\052\007\141" +
    "\032\075\050\070\051\105\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\111\101\066\102\045\103\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\052\007\215\032\075\050\070\051\105\055\212\056\114" +
    "\057\214\060\100\061\101\062\074\063\065\064\113\065" +
    "\047\066\102\067\116\070\062\071\106\072\263\001\001" +
    "\000\002\001\001\000\046\003\052\007\215\032\075\050" +
    "\070\051\105\055\212\056\114\057\214\060\100\061\101" +
    "\062\074\063\065\064\113\065\047\066\102\067\116\070" +
    "\062\071\265\001\001\000\002\001\001\000\044\003\052" +
    "\007\215\032\075\050\070\051\105\055\212\056\114\057" +
    "\214\060\100\061\101\062\074\063\065\064\113\065\047" +
    "\066\102\067\116\070\267\001\001\000\002\001\001\000" +
    "\042\003\052\007\215\032\075\050\070\051\105\055\212" +
    "\056\114\057\214\060\100\061\101\062\074\063\065\064" +
    "\113\065\047\066\102\067\273\001\001\000\042\003\052" +
    "\007\215\032\075\050\070\051\105\055\212\056\114\057" +
    "\214\060\100\061\101\062\074\063\065\064\113\065\047" +
    "\066\102\067\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\052\007\215\032\075\050\070\051\105" +
    "\055\212\056\114\057\214\060\100\061\101\062\074\063" +
    "\065\064\113\065\047\066\102\067\116\070\062\071\106" +
    "\072\064\073\110\074\301\001\001\000\072\003\052\007" +
    "\141\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\111\101\066\102\045\103" +
    "\276\001\001\000\002\001\001\000\060\003\052\007\215" +
    "\032\075\050\070\051\105\055\212\056\114\057\214\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\052\007\215\032\075\050\070\051\105\055" +
    "\212\056\114\057\214\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\102\067\116\070\062\071\106\072" +
    "\064\073\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\312\001\001\000\004\035\313" +
    "\001\001\000\004\042\314\001\001\000\006\043\253\045" +
    "\254\001\001\000\072\003\052\007\141\032\075\050\070" +
    "\051\105\055\042\056\114\057\117\060\100\061\101\062" +
    "\074\063\065\064\113\065\047\066\102\067\116\070\062" +
    "\071\106\072\064\073\110\074\050\075\104\076\077\077" +
    "\121\100\111\101\066\102\045\103\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\003\052\005\311\007" +
    "\305\032\075\034\321\050\070\051\105\055\042\056\114" +
    "\057\117\060\100\061\101\062\074\063\065\064\113\065" +
    "\047\066\102\067\116\070\062\071\106\072\064\073\110" +
    "\074\050\075\104\076\077\077\121\100\111\101\066\102" +
    "\045\103\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\052\007\141\032\075\050" +
    "\070\051\105\055\042\056\114\057\117\060\100\061\101" +
    "\062\074\063\065\064\113\065\047\066\102\067\116\070" +
    "\062\071\106\072\064\073\110\074\050\075\104\076\077" +
    "\077\121\100\111\101\066\102\045\103\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\003\052\007\141\032\075\050\070\051\105\052\331\053" +
    "\147\055\042\056\114\057\117\060\100\061\101\062\074" +
    "\063\065\064\113\065\047\066\102\067\116\070\062\071" +
    "\106\072\064\073\110\074\050\075\104\076\077\077\121" +
    "\100\111\101\066\102\045\103\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\003\052\007\141\032\075\050\070\051\105\055" +
    "\042\056\114\057\117\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\102\067\116\070\062\071\106\072" +
    "\064\073\110\074\050\075\104\076\077\077\121\100\111" +
    "\101\066\102\045\103\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\052\007\141\032\075\050\070" +
    "\051\105\052\341\053\147\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\111\101\066\102\045\103\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\003\052\007" +
    "\141\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\111\101\066\102\045\103" +
    "\153\001\001\000\002\001\001\000\004\054\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\052\007" +
    "\215\050\070\051\105\055\212\056\114\057\214\060\100" +
    "\061\357\063\065\001\001\000\002\001\001\000\026\003" +
    "\052\007\215\050\070\051\105\055\212\056\114\057\214" +
    "\060\100\061\361\063\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\052\007\141\032\075\050\070" +
    "\051\105\055\042\056\114\057\117\060\100\061\101\062" +
    "\074\063\065\064\113\065\047\066\102\067\116\070\062" +
    "\071\106\072\064\073\110\074\050\075\104\076\077\077" +
    "\121\100\u010a\101\066\102\045\001\001\000\070\003\052" +
    "\007\141\032\075\050\070\051\105\055\042\056\114\057" +
    "\117\060\100\061\101\062\074\063\065\064\113\065\047" +
    "\066\102\067\116\070\062\071\106\072\064\073\110\074" +
    "\050\075\104\076\077\077\121\100\u0109\101\066\102\045" +
    "\001\001\000\070\003\052\007\141\032\075\050\070\051" +
    "\105\055\042\056\114\057\117\060\100\061\101\062\074" +
    "\063\065\064\113\065\047\066\102\067\116\070\062\071" +
    "\106\072\064\073\110\074\050\075\104\076\077\077\121" +
    "\100\u0108\101\066\102\045\001\001\000\070\003\052\007" +
    "\141\032\075\050\070\051\105\055\042\056\114\057\117" +
    "\060\100\061\101\062\074\063\065\064\113\065\047\066" +
    "\102\067\116\070\062\071\106\072\064\073\110\074\050" +
    "\075\104\076\077\077\121\100\u0107\101\066\102\045\001" +
    "\001\000\070\003\052\007\141\032\075\050\070\051\105" +
    "\055\042\056\114\057\117\060\100\061\101\062\074\063" +
    "\065\064\113\065\047\066\102\067\116\070\062\071\106" +
    "\072\064\073\110\074\050\075\104\076\077\077\121\100" +
    "\u0106\101\066\102\045\001\001\000\070\003\052\007\141" +
    "\032\075\050\070\051\105\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\u0105\101\066\102\045\001\001" +
    "\000\070\003\052\007\141\032\075\050\070\051\105\055" +
    "\042\056\114\057\117\060\100\061\101\062\074\063\065" +
    "\064\113\065\047\066\102\067\116\070\062\071\106\072" +
    "\064\073\110\074\050\075\104\076\077\077\121\100\u0104" +
    "\101\066\102\045\001\001\000\070\003\052\007\141\032" +
    "\075\050\070\051\105\055\042\056\114\057\117\060\100" +
    "\061\101\062\074\063\065\064\113\065\047\066\102\067" +
    "\116\070\062\071\106\072\064\073\110\074\050\075\104" +
    "\076\077\077\121\100\u0103\101\066\102\045\001\001\000" +
    "\070\003\052\007\141\032\075\050\070\051\105\055\042" +
    "\056\114\057\117\060\100\061\101\062\074\063\065\064" +
    "\113\065\047\066\102\067\116\070\062\071\106\072\064" +
    "\073\110\074\050\075\104\076\077\077\121\100\u0102\101" +
    "\066\102\045\001\001\000\070\003\052\007\141\032\075" +
    "\050\070\051\105\055\042\056\114\057\117\060\100\061" +
    "\101\062\074\063\065\064\113\065\047\066\102\067\116" +
    "\070\062\071\106\072\064\073\110\074\050\075\104\076" +
    "\077\077\121\100\u0101\101\066\102\045\001\001\000\070" +
    "\003\052\007\141\032\075\050\070\051\105\055\042\056" +
    "\114\057\117\060\100\061\101\062\074\063\065\064\113" +
    "\065\047\066\102\067\116\070\062\071\106\072\064\073" +
    "\110\074\050\075\104\076\077\077\121\100\u0100\101\066" +
    "\102\045\001\001\000\070\003\052\007\141\032\075\050" +
    "\070\051\105\055\042\056\114\057\117\060\100\061\101" +
    "\062\074\063\065\064\113\065\047\066\102\067\116\070" +
    "\062\071\106\072\064\073\110\074\050\075\104\076\077" +
    "\077\121\100\377\101\066\102\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u010e\001\001\000\072\003\052\007\141" +
    "\032\075\050\070\051\105\055\042\056\114\057\117\060" +
    "\100\061\101\062\074\063\065\064\113\065\047\066\102" +
    "\067\116\070\062\071\106\072\064\073\110\074\050\075" +
    "\104\076\077\077\121\100\111\101\066\102\045\103\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\253\045\254\001\001\000\004\044\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QEDParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QEDParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public com.hocuscodus.qed.java_cup_runtime.Symbol do_action(
    int                        act_num,
    com.hocuscodus.qed.java_cup_runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QEDParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
/*
 *    Copyright (C) 2016 Hocus Codus Software inc.
 *
 *    Author: Martin Savage (msavage@hocuscodus.com)
 */

	Context context;
	int[] count = {0};
	public int errorCount = 0;
	int superClassCount;

  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof com.hocuscodus.qed.java_cup_runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
	errorCount++;
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

	public Exp getCodeNumLevels(Symbol symbol, String id) {
		Exp exp = context.getCodeNumLevels(id);

		if (exp == null) {
			ComplexSymbol cSymbol = (ComplexSymbol) symbol;

			report_error(cSymbol.xleft.getLine() + ": Cannot retrieve level &" + id, null);
		}

		return exp;
	}

	public Exp getCodeNumLevels(Symbol symbol, int index) {
		Exp exp = context.getCodeNumLevels(index);

		if (exp == null) {
			ComplexSymbol cSymbol = (ComplexSymbol) symbol;

			report_error(cSymbol.xleft.getLine() + ": Cannot retrieve level &" + index, null);
		}

		return exp;
	}

	public Type getType(Symbol symbol, String name, int numDim) {
		Type type = Type.getType(name);

		if (type == null) {
			CodeNode node = context.getCodeNode(name);

			if (node != null)
				type = (FunctionDeclaration) node.unit;
		}

		if (type != null)
		while (numDim-- > 0) {
//			CodeNode node = new CodeNode();
//			node.unit = new FieldDeclaration(type, null);
			type = new ArrayType(type);
		}
		else {
			ComplexSymbol cSymbol = (ComplexSymbol) symbol;

			report_error(cSymbol.xleft.getLine() + ": " + name + " cannot be resolved to a type", null);
		}

		return (type);
    }

	public Exp getNameExp(com.hocuscodus.qed.java_cup_runtime.Symbol symbol, List<String> names, List<Exp> args) {
		Identifier id = new Identifier(names, args);
		Exp exp = context.getNameExp(names, args);

		if (exp == null) {
			ComplexSymbol cSymbol = (ComplexSymbol) symbol;

			report_error(cSymbol.xleft.getLine() + ": " + id + " cannot be resolved to a " + id.getType(), null);
		}

		return exp;
	}

	public Exp getNameExp(List<String> names, List<Exp> args) {
		Identifier id = new Identifier(names, args);
		Exp exp = context.getNameExp(names, args);

		if (exp == null)
			report_error(id + " cannot be resolved to a " + id.getType(), null);

		return exp;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$QEDParser$actions {
  private final QEDParser parser;

  /** Constructor */
  CUP$QEDParser$actions(QEDParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final com.hocuscodus.qed.java_cup_runtime.Symbol CUP$QEDParser$do_action_part00000000(
    int                        CUP$QEDParser$act_num,
    com.hocuscodus.qed.java_cup_runtime.lr_parser CUP$QEDParser$parser,
    java.util.Stack            CUP$QEDParser$stack,
    int                        CUP$QEDParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      com.hocuscodus.qed.java_cup_runtime.Symbol CUP$QEDParser$result;

      /* select the action based on the action number */
      switch (CUP$QEDParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int start_valright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		FunctionDeclaration start_val = (FunctionDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		RESULT = start_val;
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QEDParser$parser.done_parsing();
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              FunctionDeclaration RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		FunctionDeclaration c = (FunctionDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 /*context.popPath(c); */RESULT = errorCount == 0 ? c : null; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.Number c = (java.lang.Number)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new ValueExp(Type.intType, new Integer(c.intValue())); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("literal",1, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.Number c = (java.lang.Number)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new ValueExp(Type.floatType, new Float(c.floatValue())); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("literal",1, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.Boolean c = (java.lang.Boolean)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new ValueExp(Type.booleanType, c); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("literal",1, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.Character c = (java.lang.Character)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new ValueExp(Type.charType, c); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("literal",1, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String c = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new ValueExp(Type.stringType, c); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("literal",1, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= class_type 
            {
              Type RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = t; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("type",2, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= array_type 
            {
              Type RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = t; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("type",2, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_type ::= name 
            {
              Type RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<String> t = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = getType(((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()), t.get(t.size() - 1), 0); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("class_type",3, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // array_type ::= name dims 
            {
              Type RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<String> t = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		int[] d = (int[])((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = getType(((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), t.get(t.size() - 1), d[0]); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("array_type",4, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 List<String> list = new ArrayList<String>(); list.add(i); RESULT = list; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("name",5, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // name ::= name DOT IDENTIFIER 
            {
              List<String> RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 n.add(i); RESULT = n; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("name",5, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // compilation_unit ::= package_declaration_opt push_ctx import_declarations_opt main_function block_statements_opt 
            {
              FunctionDeclaration RESULT =null;
		int pleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int pright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		Object p = (Object)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		int mleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int mright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Object m = (Object)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 context.getCtx().declaration.set(null, "_main", 1, 0);
	   if (errorCount == 0) context.getCtx().declaration.endMethodBlock(context, new Instruction(b, null));
	   RESULT = context.popCtx(); 
//		 Module dec = new Module("_main", context.modules); dec.endMethodBlock(context, new Instruction(b, null)); context.popCtx(); RESULT = dec; 

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",6, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main_function ::= push_inst push_path 
            {
              Object RESULT =null;
		 context.popPath(new FieldDeclaration(new ArrayType(Type.stringType), "args", new BinaryExp(Type.newFn, new ArrayExp(Type.stringType), null))); context.popInst(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("main_function",7, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // package_declaration_opt ::= package_declaration 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",8, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // package_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",8, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_declarations_opt ::= import_declarations 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",10, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",10, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_declarations ::= import_declaration 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declarations",11, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_declarations ::= import_declarations import_declaration 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declarations",11, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // package_declaration ::= PACKAGE name SEMICOLON 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("package_declaration",9, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // import_declaration ::= single_type_import_declaration 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declaration",12, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // import_declaration ::= type_import_on_demand_declaration 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("import_declaration",12, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // single_type_import_declaration ::= IMPORT name SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 context.importQED(n); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("single_type_import_declaration",13, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_import_on_demand_declaration ::= IMPORT name DOT MULT SEMICOLON 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("type_import_on_demand_declaration",14, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // field_declaration ::= type IDENTIFIER 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(t, i); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // field_declaration ::= type IDENTIFIER EQ MULT expression 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(t, i, e, true); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // field_declaration ::= type IDENTIFIER EQ WHILE_LITERAL expression 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(t, i, e, true); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // field_declaration ::= type IDENTIFIER EQ expression 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(t, i, e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // field_declaration ::= MULT expression 
            {
              FieldDeclaration RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(Type.intType, null, e, true); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // field_declaration ::= WHILE_LITERAL expression 
            {
              FieldDeclaration RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new FieldDeclaration(Type.intType, null, e, true); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // field_declaration ::= expression 
            {
              FieldDeclaration RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		RESULT = new FieldDeclaration(e.getReturnType(env), null, e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_declaration",15, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_declaration ::= function_header function_body attributes_opt 
            {
              Object RESULT =null;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		FunctionDeclaration d = (FunctionDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		AttrSet a = (AttrSet)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 Instruction i = new Instruction(b, a);
	   if (errorCount == 0) d.endMethodBlock(context, i);
	   context.popCtx(); context.popPath(d); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_declaration",16, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration ::= function_header function_body ARROW push_path expression pop_path SEMICOLON attributes_opt 
            {
              Object RESULT =null;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).right;
		FunctionDeclaration d = (FunctionDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).value;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		AttrSet a = (AttrSet)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 Instruction i = new Instruction(b, a);
	   if (errorCount == 0) d.endMethodBlock(context, i, e);
	   context.popCtx(); context.popPath(d); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_declaration",16, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // superclass_parameter_list ::= superclass_parameter 
            {
              Object RESULT =null;
		 superClassCount = 1; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("superclass_parameter_list",17, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // superclass_parameter_list ::= superclass_parameter_list COMMA superclass_parameter 
            {
              Object RESULT =null;
		 superClassCount++; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("superclass_parameter_list",17, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // superclass_parameter ::= push_inst push_path name LPAREN argument_list_opt RPAREN 
            {
              Object RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Exp> c = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 Exp exp = getNameExp(n, c); DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		context.getVTableTree().addTableTree(((FunctionDeclaration) exp.getReturnType(env)).vTableTree);
	   context.popPath(new SubClassDeclaration(exp.getType(), n.get(0), new BinaryExp(Type.newFn, exp, null))); context.popInst(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("superclass_parameter",18, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_header ::= type IDENTIFIER push_ctx LPAREN formal_parameter_list_opt RPAREN 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		 RESULT = context.getCtx().declaration.set(t, i, context.getCtx().declaration.topMtx.getNumNodes(), 0); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_header",19, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_header ::= type IDENTIFIER push_ctx LPAREN formal_parameter_list_opt RPAREN COLON superclass_parameter_list 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-6)).value;
		 RESULT = context.getCtx().declaration.set(t, i, context.getCtx().declaration.topMtx.getNumNodes() - superClassCount, superClassCount); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_header",19, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-7)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_parameter_list_opt ::= 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",20, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",20, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal_parameter_list ::= formal_parameter 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",21, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              Object RESULT =null;

              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",21, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formal_parameter ::= push_inst push_path type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 context.popPath(new FieldDeclaration(t, i)); context.popInst(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter",22, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formal_parameter ::= push_inst push_path type IDENTIFIER EQ expression 
            {
              Object RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 context.popPath(new FieldDeclaration(t, i, e)); context.popInst(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("formal_parameter",22, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_body ::= block 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_body",23, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_body ::= SEMICOLON 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_body",23, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_initializer ::= LBRACK variable_initializers RBRACK 
            {
              ArrayExp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		ArrayExp l = (ArrayExp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = l; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("array_initializer",24, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_initializer ::= LBRACK RBRACK 
            {
              ArrayExp RESULT =null;
		 RESULT = new ArrayExp(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("array_initializer",24, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_initializers ::= variable_initializer 
            {
              ArrayExp RESULT =null;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp i = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 ArrayExp list = new ArrayExp(); list.addExp(i); RESULT = list; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("variable_initializers",25, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_initializers ::= variable_initializers COMMA variable_initializer 
            {
              ArrayExp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		ArrayExp l = (ArrayExp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp i = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 l.addExp(i); RESULT = l; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("variable_initializers",25, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_initializer ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("variable_initializer",26, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_initializer ::= expression ARROW expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.arrowFn, e, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("variable_initializer",26, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_initializer ::= class_type push_ctx block attributes_opt 
            {
              Exp RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		AttrSet a = (AttrSet)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 FunctionDeclaration d = context.getCtx().declaration.set(t, null, 0, 0);//new FunctionDeclaration(t, null, 0, 0);
		 if (errorCount == 0) d.endMethodBlock(context, new Instruction(b, a));
		 context.popCtx();
		 RESULT = new UnaryExp(Type.callFn, new FuncExp(d, null/*context.getCurrentMethod()*/, new ArrayList<Exp>())); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("variable_initializer",26, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // block ::= LBRACE block_statements_opt RBRACE 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block",27, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block_statements_opt ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",28, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block_statements_opt ::= block_statements_opt push_inst block_statement attributes_opt 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		AttrSet a = (AttrSet)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 context.popInst(); b.add(new Instruction(i, a)); RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",28, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block_statements_opt ::= block_statements_opt push_inst push_path function_declaration 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Object d = (Object)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 context.popInst(); b.add(new Instruction(null, null)); RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statements_opt",28, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block_statement ::= leaf_expression_statement SEMICOLON 
            {
              List<Instruction> RESULT =null;
		 RESULT = null; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statement",29, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // block_statement ::= leaf_expression_statement ARROW push_path expression SEMICOLON 
            {
              List<Instruction> RESULT =null;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		FieldDeclaration d = (FieldDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 d.initExpr = new BinaryExp(Type.arrowFn, d.initExpr, e); context.popPath(d, false); RESULT = null; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statement",29, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // block_statement ::= block_expression_statement block 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statement",29, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block_statement ::= block 
            {
              List<Instruction> RESULT =null;
		int bleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int bright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<Instruction> b = (List<Instruction>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = b; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statement",29, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block_statement ::= SEMICOLON 
            {
              List<Instruction> RESULT =null;
		 RESULT = null; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_statement",29, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block_expression_statement ::= push_path field_declaration 
            {
              FieldDeclaration RESULT =null;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		FieldDeclaration d = (FieldDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 d.endFieldBlock(context, false); context.popPath(d, true); RESULT = d; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("block_expression_statement",30, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // leaf_expression_statement ::= push_path field_declaration 
            {
              FieldDeclaration RESULT =null;
		int dleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int dright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		FieldDeclaration d = (FieldDeclaration)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 d.endFieldBlock(context, true); context.popPath(d, false); RESULT = d; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("leaf_expression_statement",31, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // attributes_opt ::= 
            {
              AttrSet RESULT =null;
		 RESULT = new AttrSet(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("attributes_opt",32, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // attributes_opt ::= attributes_opt attribute 
            {
              AttrSet RESULT =null;
		int alleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int alright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		AttrSet al = (AttrSet)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Attr a = (Attr)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 al.addAttr(a); RESULT = al; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("attributes_opt",32, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // attribute ::= push_path AT IDENTIFIER LPAREN expression RPAREN 
            {
              Attr RESULT =null;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = new Attr(i, e, context.popPath()); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("attribute",33, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // push_inst ::= 
            {
              Object RESULT =null;
		 context.pushInst(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("push_inst",34, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // push_path ::= 
            {
              Object RESULT =null;
		 context.pushPath(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("push_path",35, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // pop_path ::= 
            {
              Object RESULT =null;
		 context.popPath(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("pop_path",36, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // push_ctx ::= 
            {
              Object RESULT =null;
		 context.pushCtx(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("push_ctx",37, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // argument_list ::= expression 
            {
              List<Exp> RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 List<Exp> list = new ArrayList<Exp>(); list.add(e); RESULT = list; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("argument_list",41, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argument_list ::= argument_list COMMA expression 
            {
              List<Exp> RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		List<Exp> a = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 a.add(e); RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("argument_list",41, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argument_list_opt ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",40, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argument_list_opt ::= argument_list 
            {
              List<Exp> RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<Exp> a = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("argument_list_opt",40, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // class_instance_creation_expression ::= NEW_LITERAL name LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Exp> c = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 Exp exp = getNameExp(n, c); RESULT = new BinaryExp(Type.newFn, exp, null); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("class_instance_creation_expression",39, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dims ::= LBRACK RBRACK 
            {
              int[] RESULT =null;
		 count[0] = 1; RESULT = count; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("dims",42, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dims ::= dims LBRACK RBRACK 
            {
              int[] RESULT =null;
		 count[0]++; RESULT = count; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("dims",42, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // field_access ::= primary DOT IDENTIFIER 
            {
              Exp RESULT =null;
		int pleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int pright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp p = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String n = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		RESULT = p.findVarPath(env, n, null, true); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("field_access",43, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Exp> c = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 Exp exp = getNameExp(n, c); RESULT = new UnaryExp(Type.callFn, exp); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_invocation",44, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).left;
		int pright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).right;
		Exp p = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)).value;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		java.lang.String n = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		List<Exp> a = (List<Exp>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		Exp exp = p.findVarPath(env, n, a, true); RESULT = new UnaryExp(Type.callFn, exp)/*.getArrayFieldExp(e)*/; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("function_invocation",44, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-5)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_access ::= name LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 Exp exp = getNameExp(n, null); RESULT = exp.getArrayFieldExp(e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("array_access",45, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_access ::= primary LBRACK expression RBRACK 
            {
              Exp RESULT =null;
		int pleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).left;
		int pright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).right;
		Exp p = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = p.getArrayFieldExp(e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("array_access",45, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary ::= literal 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp c = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary ::= class_instance_creation_expression 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary ::= function_invocation 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primary ::= field_access 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primary ::= array_access 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // primary ::= NEW_LITERAL array_initializer 
            {
              Exp RESULT =null;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		ArrayExp i = (ArrayExp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.newFn, i, null); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("primary",38, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // postfix_expression ::= primary 
            {
              Exp RESULT =null;
		int pleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int pright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp p = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",46, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // postfix_expression ::= name 
            {
              Exp RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 Exp exp = getNameExp(((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()), n, null); RESULT = exp; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",46, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // postfix_expression ::= postfix_expression PLUSPLUS 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = new BinaryExp(Type.subtractFn, new BinaryExp(Type.assignmentFn, e, new BinaryExp(Type.addFn, e, new ValueExp(Type.intType, new Integer(1)))), new ValueExp(Type.intType, new Integer(1))); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",46, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // postfix_expression ::= postfix_expression MINUSMINUS 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)).value;
		 RESULT = new BinaryExp(Type.addFn, new BinaryExp(Type.assignmentFn, e, new BinaryExp(Type.subtractFn, e, new ValueExp(Type.intType, new Integer(1)))), new ValueExp(Type.intType, new Integer(1))); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("postfix_expression",46, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cast_expression ::= LPAREN expression RPAREN unary_expression_not_plus_minus 
            {
              Exp RESULT =null;
		int expleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int expright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp exp = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		RESULT = new BinaryExp(Type.castFn, exp, e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("cast_expression",49, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cast_expression ::= LPAREN array_type RPAREN unary_expression_not_plus_minus 
            {
              Exp RESULT =null;
		int tleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int tright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Type t = (Type)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 DecEnv env = context.getCtx().declaration.buildDecEnv(context.getCtx().path);
		RESULT = t == e.getReturnType(env) ? e : t.canCast(e.getReturnType(env)) ? new BinaryExp(Type.castFn, new Exp(t), e) : null; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("cast_expression",49, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-3)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",47, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unary_expression_not_plus_minus ::= COMP unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new UnaryExp(Type.compFn, e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",47, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unary_expression_not_plus_minus ::= NOT unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new UnaryExp(Type.notFn, e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",47, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unary_expression_not_plus_minus ::= cast_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",47, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unary_expression ::= PLUSPLUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, e, new BinaryExp(Type.addFn, e, new ValueExp(Type.intType, new Integer(1)))); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unary_expression ::= MINUSMINUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, e, new BinaryExp(Type.subtractFn, e, new ValueExp(Type.intType, new Integer(1)))); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unary_expression ::= PLUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unary_expression ::= MINUS unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.subtractFn, new ValueExp(Type.intType, new Integer(0)), e); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unary_expression ::= AND IDENTIFIER 
            {
              Exp RESULT =null;
		int ileft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int iright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = getCodeNumLevels((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek(), i); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unary_expression ::= AND INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int cright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		java.lang.Number c = (java.lang.Number)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = getCodeNumLevels((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek(), c.intValue()); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-1)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unary_expression ::= unary_expression_not_plus_minus 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unary_expression ::= array_initializer 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		ArrayExp a = (ArrayExp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new UnaryExp(Type.callFn, a); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("unary_expression",48, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // multiplicative_expression ::= unary_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",50, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.multFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",50, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.divFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",50, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.modFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",50, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // additive_expression ::= multiplicative_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("additive_expression",51, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.addFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("additive_expression",51, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.subtractFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("additive_expression",51, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // shift_expression ::= additive_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.shiftLFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.shiftRFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // shift_expression ::= shift_expression URSHIFT additive_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.shiftURFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("shift_expression",52, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // relational_expression ::= shift_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("relational_expression",53, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // relational_expression ::= relational_expression LT shift_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.ltFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("relational_expression",53, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // relational_expression ::= relational_expression GT shift_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.gtFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("relational_expression",53, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // relational_expression ::= relational_expression LTEQ shift_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.ltEqFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("relational_expression",53, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // relational_expression ::= relational_expression GTEQ shift_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.gtEqFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("relational_expression",53, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // equality_expression ::= relational_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("equality_expression",54, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.eqFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("equality_expression",54, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.neqFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("equality_expression",54, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // and_expression ::= equality_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("and_expression",55, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // and_expression ::= and_expression AND equality_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.andFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("and_expression",55, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exclusive_or_expression ::= and_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",56, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.xorFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("exclusive_or_expression",56, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",57, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.orFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("inclusive_or_expression",57, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // conditional_and_expression ::= inclusive_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",58, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // conditional_and_expression ::= conditional_and_expression ANDAND inclusive_or_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.cAndFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",58, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // conditional_or_expression ::= conditional_and_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",59, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.cOrFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",59, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // conditional_expression ::= conditional_or_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_expression",60, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // conditional_expression ::= conditional_or_expression QUESTION expression COLON conditional_expression 
            {
              Exp RESULT =null;
		int celeft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).left;
		int ceright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).right;
		Exp ce = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)).value;
		int teleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int teright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp te = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int feleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int feright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp fe = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new TernaryExp(Type.ternaryFn, ce, te, fe); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("conditional_expression",60, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-4)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arrow_expression ::= conditional_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("arrow_expression",61, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arrow_expression ::= conditional_expression SUPER expression 
            {
              Exp RESULT =null;
		int e1left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int e1right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp e1 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int e2left = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int e2right = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e2 = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.arrowFn, e1, e2); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("arrow_expression",61, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // assignment_expression ::= arrow_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment_expression",62, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // assignment_expression ::= assignment 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment_expression",62, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // assignment ::= left_hand_side EQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.castFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // assignment ::= left_hand_side MULTEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.multFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // assignment ::= left_hand_side DIVEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.divFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // assignment ::= left_hand_side MODEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.modFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // assignment ::= left_hand_side PLUSEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.addFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // assignment ::= left_hand_side MINUSEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.subtractFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assignment ::= left_hand_side LSHIFTEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.shiftLFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assignment ::= left_hand_side RSHIFTEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.shiftRFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // assignment ::= left_hand_side URSHIFTEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.shiftURFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // assignment ::= left_hand_side ANDEQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.andFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // assignment ::= left_hand_side OREQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.orFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // assignment ::= left_hand_side XOREQ assignment_expression 
            {
              Exp RESULT =null;
		int lleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).left;
		int lright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).right;
		Exp l = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)).value;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = new BinaryExp(Type.assignmentFn, l, new BinaryExp(Type.xorFn, l, e)); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("assignment",63, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.elementAt(CUP$QEDParser$top-2)), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // left_hand_side ::= name 
            {
              Exp RESULT =null;
		int nleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int nright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		List<String> n = (List<String>)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = getNameExp(n, null); 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("left_hand_side",64, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // left_hand_side ::= field_access 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("left_hand_side",64, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // left_hand_side ::= array_access 
            {
              Exp RESULT =null;
		int aleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int aright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp a = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = a; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("left_hand_side",64, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression ::= assignment_expression 
            {
              Exp RESULT =null;
		int eleft = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).left;
		int eright = ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()).right;
		Exp e = (Exp)((com.hocuscodus.qed.java_cup_runtime.Symbol) CUP$QEDParser$stack.peek()).value;
		 RESULT = e; 
              CUP$QEDParser$result = parser.getSymbolFactory().newSymbol("expression",65, ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), ((com.hocuscodus.qed.java_cup_runtime.Symbol)CUP$QEDParser$stack.peek()), RESULT);
            }
          return CUP$QEDParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$QEDParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final com.hocuscodus.qed.java_cup_runtime.Symbol CUP$QEDParser$do_action(
    int                        CUP$QEDParser$act_num,
    com.hocuscodus.qed.java_cup_runtime.lr_parser CUP$QEDParser$parser,
    java.util.Stack            CUP$QEDParser$stack,
    int                        CUP$QEDParser$top)
    throws java.lang.Exception
    {
              return CUP$QEDParser$do_action_part00000000(
                               CUP$QEDParser$act_num,
                               CUP$QEDParser$parser,
                               CUP$QEDParser$stack,
                               CUP$QEDParser$top);
    }
}

}
